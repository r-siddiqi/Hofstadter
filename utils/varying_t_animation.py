# -*- coding: utf-8 -*-
"""varying_t_animation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18hTzMbtl-QBxOu-2pckfGfry6WnYoq4h
"""

# Animation for varying t values
def animate_butterfly_t_evolution(length=20, q=50, min_t=0.1, max_t=2.0, num_frames=50, save_path=None):
  """
  Animate the evolution of the Hofstadter butterfly as t (hopping parameter) increases
  """
  fig, ax = plt.subplots(figsize=(12, 8))
  ax.set_xlabel('Flux per Plaquette Φ')
  ax.set_ylabel('Energy E')

  def update(frame):
    ax.clear()
    ax.set_xlabel('Flux per Plaquette Φ')
    ax.set_ylabel('Energy E')
    ax.grid(True, alpha=0.2)

    # Calculate t value for this frame
    t = min_t + (max_t - min_t) * (frame / (num_frames - 1))

    # Create model and generate data
    model = Square_Hamiltonian(length=length, t=t, W=0.0, phi=0.0, q=q)
    phis = []
    energies = []

    for q_val in range(1, model.max_q + 1):
      for p in range(q_val + 1):
        if gcd(p, q_val) == 1:
          model.phi = p / q_val
          model.construct_hamiltonian()
          phis.extend([model.phi] * model.N)
          energies.extend(model.evals.tolist())

    ax.scatter(phis, energies, s=0.1, color='blue', alpha=0.5)
    ax.set_title(f'Hofstadter Butterfly (t={t:.2f}, q={q})')
    ax.set_xlim(-0.1, 1.1)
    ax.set_ylim(-4 * max_t, 4 * max_t)  # Scale y-axis with t

    return ax

  anim = FuncAnimation(
      fig,
      update,
      frames=num_frames,
      interval=100
  )

  if save_path:
    print(f"Saving animation to {save_path}")
    anim.save(save_path, writer='pillow', fps=10)
  else:
    plt.show()

  plt.close()

# Generate animation for varying t
animate_butterfly_t_evolution(save_path='butterfly_t_evolution.gif')